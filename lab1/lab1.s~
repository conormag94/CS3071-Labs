	.syntax unified
	.arch armv7-a
	.eabi_attribute 27, 3
	.eabi_attribute 28, 1
	.fpu vfpv3-d16
	.eabi_attribute 20, 1
	.eabi_attribute 21, 1
	.eabi_attribute 23, 3
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 2
	.eabi_attribute 30, 6
	.eabi_attribute 34, 1
	.eabi_attribute 18, 4
	.thumb
	.file	"lab1.c"
	.section	.rodata
	.align	2
.LC0:
	.word	5
	.word	65
	.word	40
	.word	39
	.word	30
	.word	8
	.word	17
	.word	21
	.word	3
	.word	10
	.text
	.align	2
	.global	main
	.thumb
	.thumb_func
	.type	main, %function
main:
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 1, uses_anonymous_args = 0
	@ link register save eliminated.
	push	{r4, r5, r7}
	sub	sp, sp, #60
	add	r7, sp, #0
	movs	r3, #10					;store size of array on stack
	str	r3, [r7, #44]				
	movw	r3, #:lower16:.LC0		;inialise array with 5, 65...10
	movt	r3, #:upper16:.LC0
	mov	r4, r7
	mov	r5, r3
	ldmia	r5!, {r0, r1, r2, r3}
	stmia	r4!, {r0, r1, r2, r3}
	ldmia	r5!, {r0, r1, r2, r3}
	stmia	r4!, {r0, r1, r2, r3}
	ldmia	r5, {r0, r1}
	stmia	r4, {r0, r1}
	movs	r3, #0
	str	r3, [r7, #52]				;int i = 0
	movs	r3, #0					;store i on stack
	str	r3, [r7, #52]
	b	.L2							;branch to outer for loop
	
	;body of outer for loop
.L6:
	movs	r3, #0					;int j = 0
	str	r3, [r7, #48]
	movs	r3, #0
	str	r3, [r7, #48]
	b	.L3
.L5:
	ldr	r3, [r7, #48]
	adds	r3, r3, #1
	lsls	r3, r3, #2
	add	r2, r7, #56
	add	r3, r3, r2
	ldr	r2, [r3, #-56]
	ldr	r3, [r7, #48]
	lsls	r3, r3, #2
	add	r1, r7, #56
	add	r3, r3, r1
	ldr	r3, [r3, #-56]
	cmp	r2, r3
	bge	.L4
	ldr	r3, [r7, #48]
	lsls	r3, r3, #2
	add	r2, r7, #56
	add	r3, r3, r2
	ldr	r3, [r3, #-56]
	str	r3, [r7, #40]
	ldr	r3, [r7, #48]
	adds	r3, r3, #1
	lsls	r3, r3, #2
	add	r2, r7, #56
	add	r3, r3, r2
	ldr	r2, [r3, #-56]
	ldr	r3, [r7, #48]
	lsls	r3, r3, #2
	add	r1, r7, #56
	add	r3, r3, r1
	str	r2, [r3, #-56]
	ldr	r3, [r7, #48]
	adds	r3, r3, #1
	lsls	r3, r3, #2
	add	r2, r7, #56
	add	r3, r3, r2
	ldr	r2, [r7, #40]
	str	r2, [r3, #-56]
.L4:
	ldr	r3, [r7, #48]
	adds	r3, r3, #1
	str	r3, [r7, #48]
.L3:
	ldr	r3, [r7, #44]
	subs	r2, r3, #1
	ldr	r3, [r7, #48]
	cmp	r2, r3
	bgt	.L5
	ldr	r3, [r7, #52]
	adds	r3, r3, #1
	str	r3, [r7, #52]
	
	;outer for loop
.L2:
	ldr	r2, [r7, #52]				;read i from stack
	ldr	r3, [r7, #44]				;read size from stack
	cmp	r2, r3						;for(i=0; i<size; i++)
	blt	.L6
	movs	r3, #0
	mov	r0, r3
	adds	r7, r7, #60
	mov	sp, r7
	@ sp needed
	pop	{r4, r5, r7}
	bx	lr
	.size	main, .-main
	.ident	"GCC: ( 4.9.2-10) 4.9.2"
	.section	.note.GNU-stack,"",%progbits
